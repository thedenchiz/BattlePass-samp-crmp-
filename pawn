// battle_pass.pwn

#include <a_samp>
#include <socket> // Плагин для работы с сокетами (требует установки)

#define BP_SERVER_IP "127.0.0.1"
#define BP_SERVER_PORT 8888

enum E_PLAYER_BP_DATA {
    bpLevel,
    bpXP,
    bpSocket,
    bool:bpLoaded
}

new PlayerBPData[MAX_PLAYERS][E_PLAYER_BP_DATA];

public OnGameModeInit() {
    // Инициализация сокета для каждого игрока
    for(new i = 0; i < MAX_PLAYERS; i++) {
        PlayerBPData[i][bpSocket] = socket_create();
    }
    return 1;
}

public OnPlayerConnect(playerid) {
    // Подключение к BattlePass серверу
    if(socket_connect(PlayerBPData[playerid][bpSocket], BP_SERVER_IP, BP_SERVER_PORT)) {
        SendBPCommand(playerid, "LOAD:%d", playerid);
    } else {
        printf("[BP] Connection error for player %d", playerid);
    }
    return 1;
}

public OnPlayerDisconnect(playerid, reason) {
    if(PlayerBPData[playerid][bpLoaded]) {
        SendBPCommand(playerid, "SAVE:%d", playerid);
    }
    socket_close(PlayerBPData[playerid][bpSocket]);
    return 1;
}

forward SendBPCommand(playerid, const command[], {Float, _}:...);
public SendBPCommand(playerid, const command[], {Float, _}:...) {
    new msg[128], tmp[128];
    format(tmp, sizeof(tmp), command, ___(2));
    format(msg, sizeof(msg), "%s\r\n", tmp);
    
    socket_send(PlayerBPData[playerid][bpSocket], msg);
    return 1;
}

public OnSocketReceive(socketid, data[], len) {
    new playerid = GetPlayerBySocket(socketid);
    if(playerid == INVALID_PLAYER_ID) return;
    
    new cmd[20], response[128];
    sscanf(data, "p<:>s[20]s[128]", cmd, response);
    
    if(!strcmp(cmd, "LEVEL")) {
        new pid, level;
        if(sscanf(response, "p<:>ii", pid, level) == 0) {
            PlayerBPData[playerid][bpLevel] = level;
        }
    }
    else if(!strcmp(cmd, "XP")) {
        new pid, xp;
        if(sscanf(response, "p<:>ii", pid, xp) == 0) {
            PlayerBPData[playerid][bpXP] = xp;
        }
    }
    else if(!strcmp(cmd, "PONG")) {
        // Пинг успешен
    }
    else if(!strcmp(cmd, "ERROR")) {
        printf("[BP Error] Player %d: %s", playerid, response);
    }
    
    // Полная загрузка данных
    if(!PlayerBPData[playerid][bpLoaded] && PlayerBPData[playerid][bpLevel] > 0) {
        PlayerBPData[playerid][bpLoaded] = true;
        OnBattlePassLoaded(playerid);
    }
}

forward OnBattlePassLoaded(playerid);
public OnBattlePassLoaded(playerid) {
    // Вызывается когда данные полностью загружены
    new msg[128];
    format(msg, sizeof(msg), "Ваш уровень Battle Pass: %d", PlayerBPData[playerid][bpLevel]);
    SendClientMessage(playerid, 0x00FF00AA, msg);
}

// Пример обработки игрового события
public OnPlayerFinishQuest(playerid, quest_type[], progress) {
    if(PlayerBPData[playerid][bpLoaded]) {
        SendBPCommand(playerid, "EVENT:%d:%s:%d", playerid, quest_type, progress);
    }
    return 1;
}

// Периодическая проверка связи
forward BP_PingCheck();
public BP_PingCheck() {
    for(new i = 0; i < MAX_PLAYERS; i++) {
        if(IsPlayerConnected(i) {
            SendBPCommand(i, "PING:%d", i);
        }
    }
    SetTimer("BP_PingCheck", 60000, false);
}

stock GetPlayerBySocket(socketid) {
    for(new i = 0; i < MAX_PLAYERS; i++) {
        if(PlayerBPData[i][bpSocket] == socketid) {
            return i;
        }
    }
    return INVALID_PLAYER_ID;
}